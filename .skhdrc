# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.


###############################
# Windows - BSP
###############################

## focus window
#alt - h : yabai -m window --focus west
#alt - l : yabai -m window --focus east
## TODO: vim move lines
#alt - j : yabai -m window --focus south
#alt - k : yabai -m window --focus north
#
## swap managed window
#shift + alt - h : yabai -m window --swap west
#shift + alt - j : yabai -m window --swap south
#shift + alt - k : yabai -m window --swap north
#shift + alt - l : yabai -m window --swap east
#
## toggle window zoom
## alt - d : yabai -m window --toggle zoom-parent
#alt - f : yabai -m window --toggle zoom-fullscreen;
##alt - f : yabai -m space --toggle padding; yabai -m window --toggle float --grid 1:1:0:0:1:1
#
## toggle window split type
#alt - e : yabai -m window --toggle split
#
## float / unfloat window and center on screen
#alt - t : yabai -m window --toggle float --grid 4:4:1:1:2:2;

###############################
# Windows - Stack, workd for BSP too
###############################

alt - k : yabai -m query --spaces --space \
  | jq -re ".index" \
  | xargs -I{} yabai -m query --windows --space {} \
  | jq -sre 'add | sort_by(.display, .frame.y, .frame.x, .id) | . as $array | length as $array_length | index(map(select(."has-focus"==true))) as $has_index | if $has_index > 0 then nth($has_index - 1).id else nth($array_length - 1).id end' \
  | xargs -I{} yabai -m window --focus {}

alt - j : yabai -m query --spaces --space \
  | jq -re ".index" \
  | xargs -I{} yabai -m query --windows --space {} \
  | jq -sre 'add | sort_by(.display, .frame.y, .frame.x, .id) | . as $array | length as $array_length | index(map(select(."has-focus"==true))) as $has_index | if $array_length - 1 > $has_index then nth($has_index + 1).id else nth(0).id end' \
  | xargs -I{} yabai -m window --focus {}

###############################
# Spaces
###############################

# TODO: last, prev, next - move, switch
# fast focus desktop
#alt - b : yabai -m space --focus recent

#alt - h : yabai -m space --focus prev
#alt - l : yabai -m space --focus next
#
#alt - 1 : yabai -m space --focus 1
#alt - 2 : yabai -m space --focus 2
#alt - 3 : yabai -m space --focus 3
#alt - 4 : yabai -m space --focus 4
#alt - 5 : yabai -m space --focus 5
#alt - 6 : yabai -m space --focus 6
#alt - 7 : yabai -m space --focus 7
#alt - 8 : yabai -m space --focus 8
#alt - 9 : yabai -m space --focus 9

# send window to desktop and follow focus
#shift + alt - z : yabai -m window --space next; yabai -m space --focus prev
#shift + alt - b : yabai -m window --space next; yabai -m space --focus recent
#shift + alt - y : yabai -m window --space next; yabai -m space --focus next

# shift+cmd-4 conflicts with creenshots
#shift + cmd - 1 : yabai -m window --space  1; yabai -m space --focus 1
#shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2
#shift + cmd - 3 : yabai -m window --space  3; yabai -m space --focus 3
#shift + cmd - 4 : yabai -m window --space  4; yabai -m space --focus 4
#shift + cmd - 5 : yabai -m window --space  5; yabai -m space --focus 5

shift + cmd - n : yabai -m space --create && \
                  index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
                  yabai -m window --space "${index}" && \
                  yabai -m space --focus "${index}"

shift + cmd - d: yabai -m space --destroy

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# move managed window
# shift + cmd - h : yabai -m window --warp east

# balance size of windows
#shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
#shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1


# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle sticky(+float), picture-in-picture
# alt - p : yabai -m window --toggle sticky --toggle pip
